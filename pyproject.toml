
[build-system]
    build-backend = "setuptools.build_meta"
    requires      = ["setuptools-scm[toml]>=6.2", "setuptools>=64", "wheel"]

[project]
    authors = [{ name = "CarbonPlan", email = "tech@carbonplan.org" }]
    classifiers = [
        "Development Status :: 4 - Beta",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Operating System :: OS Independent",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
        "Programming Language :: Python",

        "Topic :: Scientific/Engineering",
    ]
    description = "A small utility for generating ND array pyramids using Xarray and Zarr"
    dynamic = ["version"]
    license = { text = "MIT" }
    name = "ndpyramid"
    readme = "README.md"
    requires-python = ">=3.10"

    dependencies = [
        "cf_xarray>=0.8.0",
        "numpy",
        "pydantic>=1.10",
        "pyproj",
        "rasterio",
        "xarray[complete]>=2024.10.0",
        "zarr",
    ]

[project.optional-dependencies]
    complete = [
        "cftime",
        "mercantile",
        "ndpyramid[dask,jupyter,xesmf]",
        "rioxarray",
        "scipy",
    ]
    dask = ["dask[complete]", "pyresample"]
    jupyter = ['ipytree>=0.2.2', 'ipywidgets>=8.0.0', 'matplotlib', 'notebook']
    xesmf = ["xesmf>=0.8"]

    test = [
        "ndpyramid[complete]",
        "pre-commit",
        "pytest",
        "pytest-benchmark",
        "pytest-codspeed",
        "pytest-cov",
        "pytest-mypy",
    ]

[project.urls]
    repository = "https://github.com/carbonplan/ndpyramid"

[tool.setuptools.packages.find]
    include = ["ndpyramid*"]

[tool.setuptools_scm]
    fallback_version  = "999"
    local_scheme      = "node-and-date"
    version_scheme    = "post-release"
    write_to          = "ndpyramid/_version.py"
    write_to_template = '__version__ = "{version}"'

    # [tool.setuptools.dynamic]
    # version = { attr = "ndpyramid.__version__" }

[tool.black]
    line-length               = 100
    skip-string-normalization = true
    target-version            = ['py310']

[tool.ruff]

    builtins       = ["ellipsis"]
    extend-include = ["*.ipynb"]
    line-length    = 100
    target-version = "py310"
    # Exclude a variety of commonly ignored directories.
    exclude = [
        ".bzr",
        ".direnv",
        ".eggs",
        ".git",
        ".hg",
        ".mypy_cache",
        ".nox",
        ".pants.d",
        ".ruff_cache",
        ".svn",
        ".tox",
        ".venv",
        "__pypackages__",
        "_build",
        "buck-out",
        "build",
        "dist",
        "node_modules",
        "venv",
    ]

[tool.ruff.lint]
    # E402: module level import not at top of file
    # E501: line too long - let black worry about that
    # E731: do not assign a lambda expression, use a def
    ignore = ["E402", "E501", "E731"]
    select = [
        # Pyflakes
        "F",
        # Pycodestyle
        "E",
        "Q",
        "W",
        # isort
        "I",
        # Pyupgrade
        "UP",
    ]

[tool.ruff.lint.flake8-quotes]
    docstring-quotes = "double"
    inline-quotes    = "double"
    multiline-quotes = "double"

[tool.ruff.lint.mccabe]
    max-complexity = 18

[tool.ruff.lint.isort]
    known-first-party = ["ndpyramid"]

# Notebook ruff config
[tool.ruff.lint.per-file-ignores]
    "*.ipynb" = ["D100", "E402", "F401"]

[tool.pytest.ini_options]
    addopts              = "--cov=./ --cov-report=xml --verbose"
    console_output_style = "count"

[tool.mypy]
    ignore_missing_imports = true
    no_implicit_optional   = false
